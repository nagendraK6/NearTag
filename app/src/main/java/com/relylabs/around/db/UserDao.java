package com.relylabs.around.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "UserId", false, "USER_ID");
        public final static Property FirstName = new Property(2, String.class, "FirstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(3, String.class, "LastName", false, "LAST_NAME");
        public final static Property Email = new Property(4, String.class, "Email", false, "EMAIL");
        public final static Property CountryCode = new Property(5, String.class, "CountryCode", false, "COUNTRY_CODE");
        public final static Property PhoneNo = new Property(6, String.class, "PhoneNo", false, "PHONE_NO");
        public final static Property Location = new Property(7, String.class, "Location", false, "LOCATION");
        public final static Property ProfilePicURL = new Property(8, String.class, "ProfilePicURL", false, "PROFILE_PIC_URL");
        public final static Property UserToken = new Property(9, String.class, "UserToken", false, "USER_TOKEN");
        public final static Property IsOTPVerified = new Property(10, Boolean.class, "IsOTPVerified", false, "IS_OTPVERIFIED");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: UserId
                "\"FIRST_NAME\" TEXT," + // 2: FirstName
                "\"LAST_NAME\" TEXT," + // 3: LastName
                "\"EMAIL\" TEXT," + // 4: Email
                "\"COUNTRY_CODE\" TEXT," + // 5: CountryCode
                "\"PHONE_NO\" TEXT," + // 6: PhoneNo
                "\"LOCATION\" TEXT," + // 7: Location
                "\"PROFILE_PIC_URL\" TEXT," + // 8: ProfilePicURL
                "\"USER_TOKEN\" TEXT," + // 9: UserToken
                "\"IS_OTPVERIFIED\" INTEGER);"); // 10: IsOTPVerified
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String FirstName = entity.getFirstName();
        if (FirstName != null) {
            stmt.bindString(3, FirstName);
        }
 
        String LastName = entity.getLastName();
        if (LastName != null) {
            stmt.bindString(4, LastName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(5, Email);
        }
 
        String CountryCode = entity.getCountryCode();
        if (CountryCode != null) {
            stmt.bindString(6, CountryCode);
        }
 
        String PhoneNo = entity.getPhoneNo();
        if (PhoneNo != null) {
            stmt.bindString(7, PhoneNo);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(8, Location);
        }
 
        String ProfilePicURL = entity.getProfilePicURL();
        if (ProfilePicURL != null) {
            stmt.bindString(9, ProfilePicURL);
        }
 
        String UserToken = entity.getUserToken();
        if (UserToken != null) {
            stmt.bindString(10, UserToken);
        }
 
        Boolean IsOTPVerified = entity.getIsOTPVerified();
        if (IsOTPVerified != null) {
            stmt.bindLong(11, IsOTPVerified ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String FirstName = entity.getFirstName();
        if (FirstName != null) {
            stmt.bindString(3, FirstName);
        }
 
        String LastName = entity.getLastName();
        if (LastName != null) {
            stmt.bindString(4, LastName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(5, Email);
        }
 
        String CountryCode = entity.getCountryCode();
        if (CountryCode != null) {
            stmt.bindString(6, CountryCode);
        }
 
        String PhoneNo = entity.getPhoneNo();
        if (PhoneNo != null) {
            stmt.bindString(7, PhoneNo);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(8, Location);
        }
 
        String ProfilePicURL = entity.getProfilePicURL();
        if (ProfilePicURL != null) {
            stmt.bindString(9, ProfilePicURL);
        }
 
        String UserToken = entity.getUserToken();
        if (UserToken != null) {
            stmt.bindString(10, UserToken);
        }
 
        Boolean IsOTPVerified = entity.getIsOTPVerified();
        if (IsOTPVerified != null) {
            stmt.bindLong(11, IsOTPVerified ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FirstName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LastName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CountryCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PhoneNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Location
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ProfilePicURL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserToken
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // IsOTPVerified
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setFirstName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountryCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProfilePicURL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsOTPVerified(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
